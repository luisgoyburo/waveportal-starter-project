{"version":3,"sources":["App.js","index.js"],"names":["App","useState","currentAccount","setCurrentAccount","input","setInput","allWaves","setAllWaves","contractAddress","getAllWaves","a","window","ethereum","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","contractABI","waves","wavesCleaned","map","wave","address","waver","timestamp","Date","message","console","log","useEffect","onNewWave","from","prevState","on","off","abi","checkIfWalletIsConnected","request","method","accounts","length","account","connectWallet","alert","getTotalWaves","count","toNumber","gasLimit","waveTxn","hash","wait","className","onClick","value","onChange","e","target","index","key","style","backgroundColor","marginTop","padding","toString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9511813e.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport './App.css';\nimport abi from './utils/WavePortal.json';\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n\n  //const [currentWaves, setCurrentWaves] = useState(0);\n\n  const [input, setInput] = useState('');\n\n  const [allWaves, setAllWaves] = useState([]);\n\n  const contractAddress = \"0x96bD9F0BF4277f6301b95EE77b0f605601FFA9Ec\";\n\n  /*\n   * Create a method that gets all waves from your contract\n   */\n  const getAllWaves = async () => {\n    const { ethereum } = window;\n  \n    try {\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n        const waves = await wavePortalContract.getAllWaves();\n  \n        const wavesCleaned = waves.map(wave => {\n          return {\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message,\n          };\n        });\n  \n        setAllWaves(wavesCleaned);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  \n  /**\n   * Listen in for emitter events!\n   */\n  useEffect(() => {\n    let wavePortalContract;\n  \n    const onNewWave = (from, timestamp, message) => {\n      console.log('NewWave', from, timestamp, message);\n      setAllWaves(prevState => [\n        ...prevState,\n        {\n          address: from,\n          timestamp: new Date(timestamp * 1000),\n          message: message,\n        },\n      ]);\n    };\n  \n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n  \n      wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n      wavePortalContract.on('NewWave', onNewWave);\n    }\n  \n    return () => {\n      if (wavePortalContract) {\n        wavePortalContract.off('NewWave', onNewWave);\n      }\n    };\n  }, []);\n\n\n\n\n  const contractABI = abi.abi;\n  \n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account);\n        getAllWaves()\n      } else {\n        console.log(\"No authorized account found\")\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  /**\n  * Implement your connectWallet method here\n  */\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]); \n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const wave = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        let count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n\n        //setCurrentWaves(count.toNumber());\n\n        /*\n        * Execute the actual wave from your smart contract\n        */\n        //const waveTxn = await wavePortalContract.wave();\n        const waveTxn = await wavePortalContract.wave(input,  { gasLimit: 300000 })\n        console.log(\"Mining...\", waveTxn.hash);\n\n        await waveTxn.wait();\n        console.log(\"Mined -- \", waveTxn.hash);\n\n        count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n        //setCurrentWaves(count.toNumber());\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n  \n  return (\n    <div className=\"mainContainer\">\n      <div className=\"dataContainer\">\n        <div className=\"header\">\n          HI Y'LL GM, THIS IS WEB3\n        </div>\n\n        <div className=\"bio\">\n          Luis Goyburo speeking, I am a full stack developer diving in web3, 'cause is the future.\n        </div>\n        <div className=\"waveContainer\">\n        <button className=\"waveButton\" onClick={wave}>\n          Wave at Me\n        </button>\n        </div>\n        <div className=\"songContainer\">\n              <div className=\"label\">\n                <label >Write the best song ever, for you!!!</label>\n              </div>\n              <div>\n                <input value={input} onChange={e => setInput(e.target.value)} />\n              </div>\n        </div>\n        <div className=\"waveContainer\">\n        {!currentAccount && (\n          <button className=\"waveButton\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        )}\n        </div>\n        {allWaves.map((wave, index) => {\n          return (\n            <div className=\"waveList\" key={index} style={{ backgroundColor: \"OldLace\", marginTop: \"16px\", padding: \"8px\" }}>\n              <div>Address: {wave.address} </div>\n              <div>Song: {wave.message}</div>\n              <div>Time: {wave.timestamp.toString()}</div>\n              \n            </div>)\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}